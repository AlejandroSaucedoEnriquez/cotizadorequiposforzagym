plugins {
	id 'java'
	id("org.sonarqube") version "4.4.1.3373"
	id 'org.springframework.boot' version '3.2.0'
	id 'io.spring.dependency-management' version '1.1.4'
	id 'org.asciidoctor.jvm.convert' version '3.3.2'
	id "io.freefair.lombok" version "8.4"
	id "jacoco"
}

group = 'org.bedu'
version = '0.0.1-SNAPSHOT'

java {
	sourceCompatibility = '17'
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

ext {
	set('snippetsDir', file("build/generated-snippets"))
}

dependencies {
	testImplementation 'org.junit.jupiter:junit-jupiter:5.10.1'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.mapstruct:mapstruct:1.5.5.Final'

	runtimeOnly 'com.h2database:h2'
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.mapstruct:mapstruct-processor:1.5.5.Final'
	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.3.0'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
	testImplementation 'org.mockito:mockito-core:5.9.0'
}

tasks.named('test') {
	outputs.dir snippetsDir
	useJUnitPlatform()
	finalizedBy jacocoTestReport
}

//habilita el reporte de jacoco por XML para que Sonarqube lo analice
jacocoTestReport{
	reports {
		xml.required = true
	}
	afterEvaluate {
		classDirectories.setFrom(files(classDirectories.files.collect {
			fileTree(dir: it,
					exclude: [
							'org/bedu/Cotizador/model/**',
							'org/bedu/Cotizador/dto/**',
							'org/bedu/Cotizador/mapper/**',
							'org/bedu/Cotizador/exception/**',
							'org/bedu/Application.class'
					]
			)
		}))
	}
}

tasks.named('asciidoctor') {
	inputs.dir snippetsDir
	dependsOn test
}

test{
	useJUnitPlatform()
	jacoco {
		excludes = [
		        'org.bedu.Cotizador.model.*',
		        'org.bedu.Cotizador.dto.*',
		        'org.bedu.Cotizador.mapper.*',
				'org.bedu.Cotizador.exception',
		        'org.bedu.Cotizador.Application'
		]
	}
}

tasks.named('sonar') {
	dependsOn test
}

task stage(dependsOn: ['build', 'clean'])
build.mustRunAfter clean